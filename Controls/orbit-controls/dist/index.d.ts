import { GLWidget, Camera, Vector2, Vector3 } from "@gl-widget/gl-widget";
declare class OrbitControls {
    onMouseWheel: (event: any) => void;
    onMouseUp: (event: any) => void;
    onMouseMove: (event: any) => void;
    onMouseDown: (event: any) => void;
    lastQuaternion: any;
    lastPosition: Vector3;
    quatInverse: any;
    quat: any;
    offset: Vector3;
    enabled: boolean;
    state: number;
    dollyDelta: any;
    dollyEnd: any;
    dollyStart: any;
    rotateDelta: Vector2;
    rotateEnd: any;
    rotateStart: any;
    zoomChanged: boolean;
    panOffset: Vector3;
    scale: number;
    sphericalDelta: any;
    spherical: any;
    rotateSpeed: number;
    enableRotate: boolean;
    zoomSpeed: number;
    enableZoom: boolean;
    dampingFactor: number;
    enableDamping: boolean;
    maxAzimuthAngle: number;
    minAzimuthAngle: number;
    maxPolarAngle: number;
    minPolarAngle: number;
    maxZoom: number;
    minZoom: number;
    maxDistance: number;
    minDistance: number;
    target: Vector3;
    autoRotateSpeed: number;
    autoRotate: boolean;
    mouseButtons: {
        LEFT: number;
        MIDDLE: number;
        RIGHT: number;
    };
    camera: Camera;
    domElement: HTMLElement;
    constructor(glWidget: GLWidget);
    handleMouseDownRotate(event: any): void;
    handleMouseDownDolly(event: any): void;
    handleMouseMoveRotate(event: any): void;
    handleMouseMoveDolly(event: any): void;
    handleMouseWheel(event: any): void;
    rotateLeft(angle: any): void;
    rotateUp(angle: any): void;
    dollyIn(dollyScale: any): void;
    dollyOut(dollyScale: any): void;
    getAutoRotationAngle(): number;
    getZoomScale(): number;
    update(): boolean;
}
export default OrbitControls;
